package repository

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/KusionStack/karbour/pkg/domain/model"
	"github.com/KusionStack/karbour/pkg/infra/persistence/elasticsearch"
)

// AuditRepository defines the interface for audit log storage operations.
type AuditRepository interface {
	Create(ctx context.Context, audit model.Audit) error
	Read(ctx context.Context, auditID string) (model.Audit, error)
	Update(ctx context.Context, auditID string, audit model.Audit) error
	Delete(ctx context.Context, auditID string) error
}

type esAuditRepository struct {
	esClient elasticsearch.Client
	index    string // Elasticsearch index for storing audit logs
}

// NewESAuditRepository creates a new repository for Audit entities using Elasticsearch.
func NewESAuditRepository(client elasticsearch.Client) AuditRepository {
	return &esAuditRepository{
		esClient: client,
		index:    "defaultIndex",
	}
}

// Create stores a new audit log entry in Elasticsearch.
func (r *esAuditRepository) Create(ctx context.Context, audit model.Audit) error {
	body, err := json.Marshal(audit)
	if err != nil {
		return err
	}

	// Assuming the audit log ID is generated by Elasticsearch
	_, err = r.esClient.CreateDocument(ctx, r.index, "", bytes.NewReader(body))
	return err
}

// Read retrieves an audit log entry by its ID.
func (r *esAuditRepository) Read(ctx context.Context, auditID string) (model.Audit, error) {
	res, err := r.esClient.GetDocument(ctx, r.index, auditID)
	if err != nil {
		return model.Audit{}, err
	}

	var audit model.Audit
	if err := json.Unmarshal(res.([]byte), &audit); err != nil {
		return model.Audit{}, err
	}

	return audit, nil
}

// Update modifies an existing audit log entry.
func (r *esAuditRepository) Update(ctx context.Context, auditID string, audit model.Audit) error {
	body, err := json.Marshal(audit)
	if err != nil {
		return err
	}

	_, err = r.esClient.UpdateDocument(ctx, r.index, auditID, bytes.NewReader(body))
	return err
}

// Delete removes an audit log entry by its ID.
func (r *esAuditRepository) Delete(ctx context.Context, auditID string) error {
	_, err := r.esClient.DeleteDocument(ctx, r.index, auditID)
	return err
}
