version: 1.5

aciTags: DOCKER

stages: # 定义了一条pipeline
  - 前置任务 # 定义了stage
  - 交付物
  
# Go 代码扫描:
#   stage: 前置任务
#   only:
#     change:
#       - pkg/*
#       - cmd/*
#   plugin: CMD
#   parameters:
#     ACI_TIMEOUT: '10' # 特殊参数, 定义Job超时时间，单位是min
#   # # 暂不开启强制扫描结果卡点
#   # allowFailure: true
#   pluginConfig:
#     encoding: UTF-8 # 编码设置
#     excludes: # 排除哪些项不进行代码扫描, 匹配相对于项目根目录的相对路径
#       - "hack/**"
#       - "vendor/**"
#     # 设置CMD进行扫描的语言，目前可用 CMD_CPP_SCAN、CMD_GO_SCAN、CMD_GOLANGCI_LINT、CMD_PYTHON_FLAKE8
#     # CMD_GOLANGCI_LINT 符合 golangci-lint 的社区规范，golangci-lint 配置见：.golangci.yml
#     taskKind: CMD_GOLANGCI_LINT
#   checkRule:
#     - blocker = 0 && critical = 0

# ref:
# https://code.alipay.com/sigma/alipay-extensions/blob/master/.aci.yml
# https://yuque.antfin-inc.com/computing_ai_quality/ci_solution/skgvar
Go 单元测试:
  stage: 前置任务
  only:
    change:
      - pkg/*
      - cmd/*
  aciTags: DOCKER
  steps:
    - plugin: clone
    - plugin: shell
      resources:
        cpu: 2
        mem: 4
        disk: 10
      inputs:
        image: reg.docker.alibaba-inc.com/ant-iac/golang:1.19.4
        command:
          - |
            chmod 700 ${WORKSPACE}/hack/set_aci_env.sh && ${WORKSPACE}/hack/set_aci_env.sh
            cd ${WORKSPACE}
            mkdir -p result

            # install dependency
            go env
            go install github.com/jstemmer/go-junit-report@v1.0.0
            go install github.com/t-yuki/gocover-cobertura@latest
            chmod +x ${GOPATH}/bin/go-junit-report
            chmod +x ${GOPATH}/bin/gocover-cobertura

            # generate coverage.out & coverage.log
            TEST_FLAGS='-count=1 -v' make cover | tee coverage.log

            # generate TEST-all.xml by coverate.log
            cat coverage.log | ${GOPATH}/bin/go-junit-report > $WORKSPACE/result/TEST-all.xml

            # generate coverage report of html format by coverage.out
            go tool cover -html=coverage.out -o $WORKSPACE/result/coverage.html

            # compute func-coverage by coverage.out
            go tool cover -func=coverage.out -o $WORKSPACE/result/func.out
            echo test func-coverage $(tail -1 $WORKSPACE/result/func.out | awk '{print $3}')

            # generate cover.xml by coverage.out
            cat coverage.out | ${GOPATH}/bin/gocover-cobertura > $WORKSPACE/result/cover.xml
    - plugin: coverage-client-upload-compass
      inputs:
        filePath: result/cover.xml
        timeout: "300"
  checkRule:
    # 代码测试通过率
    - passRate = 100
    # 代码总体覆盖率
    #    - coverage > 0
    # # 代码变更覆盖率
    # - diffLineCoverage > 20
  publisher:
    archiveArtifacts:
      artifacts: "result/"
      allowEmptyArchive: true
    junit: "**/TEST-*.xml"
    html:
      index: result/coverage.html  #(html的入口)
      displayName: 覆盖率报告  #(html链接的展示名称 默认是 链接名称)


构建预发布镜像:
  stage: 交付物 # 本阶段执行两个步骤，一是执行项目源代码编译，二是进行镜像的构建
  only:
    triggerType:
      - push 
    triggerBranch:
      pushOriginalBranch:
        - ^master$
        - ^sprint-\d*$
  plugin: ANT-BUILD # 选用ANT-BUILD插件来驱动镜像构建
  pluginConfig:
    image: reg.docker.alibaba-inc.com/ant-iac/golang:1.19.4 # 指定使用哪个image
    beforeScript:
      - chmod 700 ${LINKB_WORKSPACE}/hack/set_aci_env.sh && ${LINKB_WORKSPACE}/hack/set_aci_env.sh
    script:
      - cd ${LINKB_WORKSPACE}
      - make build-all
    inputs: # 这一步指定镜像构建的输入参数，需要一个context目录和一个Dockerfile的路径
      params:
        - name: DIRECTORY
          value: . # docker build指令执行时使用的context目录
        - name: DOCKERFILE
          value: Dockerfile # Dockerfile的路径，相对于源代码项目的根目录
    outputs: # 纳入构建物列表
      - name: "karbour-linux"
        desc: "karbour for linux/amd64"
        paths: [ "./build/linux/karbour" ]
      - name: "karbour-darwin"
        desc: "karbour for darwin"
        paths: [ "./build/darwin/karbour" ]
      - name: "karbour-windows"
        desc: "karbour for windows"
        paths: [ "./build/windows/karbour.exe" ]
      - name: karbour # 产出的镜像名称 参考：https://yuque.antfin-inc.com/linke/help/exwqd4#Ws5IS
        type: image
        repository: reg.docker.alibaba-inc.com
        namespace: ant-iac
        tag: ${ACI_COMMIT_TAG}-${ACI_COMMIT_SHORT_SHA}
        desc: "karbour"

构建正式镜像:
  stage: 交付物 # 本阶段执行两个步骤，一是执行项目源代码编译，二是进行镜像的构建
  only:
    triggerType:
      - tagPush
    triggerBranch:
      pushOriginalBranch:
        - ^master$
  plugin: ANT-BUILD # 选用ANT-BUILD插件来驱动镜像构建
  pluginConfig:
    image: reg.docker.alibaba-inc.com/ant-iac/golang:1.19.4 # 指定使用哪个image
    beforeScript:
      - chmod 700 ${LINKB_WORKSPACE}/hack/set_aci_env.sh && ${LINKB_WORKSPACE}/hack/set_aci_env.sh
    script:
      - cd ${LINKB_WORKSPACE}
      - make build-all
    inputs: # 这一步指定镜像构建的输入参数，需要一个context目录和一个Dockerfile的路径
      params:
        - name: DIRECTORY
          value: . # docker build指令执行时使用的context目录
        - name: DOCKERFILE
          value: Dockerfile # Dockerfile的路径，相对于源代码项目的根目录
    outputs: # 纳入构建物列表
      - name: "karbour-linux"
        desc: "karbour for linux/amd64"
        paths: [ "./build/linux/karbour" ]
      - name: "karbour-darwin"
        desc: "karbour for darwin"
        paths: [ "./build/darwin/karbour" ]
      - name: "karbour-windows"
        desc: "karbour for windows"
        paths: [ "./build/windows/karbour.exe" ]
      - name: karbour # 产出的镜像名称 参考：https://yuque.antfin-inc.com/linke/help/exwqd4#Ws5IS
        type: image
        repository: reg.docker.alibaba-inc.com
        namespace: ant-iac
        tag: ${ACI_COMMIT_TAG}
        desc: "karbour"